import{_ as e,c as a,o as s,a6 as r}from"./chunks/framework.h8EOfMYb.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"examples/rpr/sphere_plane.md","filePath":"examples/rpr/sphere_plane.md","lastUpdated":null}'),o={name:"examples/rpr/sphere_plane.md"},t=r('<div class="tip custom-block"><p class="custom-block-title">Info</p><p>Transfering examples from here <a href="https://github.com/lazarusA/RPRMakieNotes" target="_blank" rel="noreferrer">https://github.com/lazarusA/RPRMakieNotes</a></p></div><p>using GLMakie, GeometryBasics using RPRMakie, RadeonProRender using LinearAlgebra, Colors, FileIO</p><h2 id="background/sky-color" tabindex="-1">background/sky color <a class="header-anchor" href="#background/sky-color" aria-label="Permalink to &quot;background/sky color {#background/sky-color}&quot;">​</a></h2><p>img = [colorant&quot;grey90&quot; for i in 1:1, j in 1:1]</p><h2 id="color-as-an-array/image,-hence-a-normal-image-also-works" tabindex="-1">color as an array/image, hence a normal image also works <a class="header-anchor" href="#color-as-an-array/image,-hence-a-normal-image-also-works" aria-label="Permalink to &quot;color as an array/image, hence a normal image also works {#color-as-an-array/image,-hence-a-normal-image-also-works}&quot;">​</a></h2><p>lights = [EnvironmentLight(1.0, img&#39;), PointLight(Vec3f(2,0,2.0), RGBf(8.0, 6.0, 5.0))]</p><h2 id="custom-Tesselation-over-an-Sphere" tabindex="-1">custom Tesselation over an Sphere <a class="header-anchor" href="#custom-Tesselation-over-an-Sphere" aria-label="Permalink to &quot;custom Tesselation over an Sphere {#custom-Tesselation-over-an-Sphere}&quot;">​</a></h2><p>function SphereTess(; o=Point3f(0), r=1, tess=64) return uv_normal_mesh(Tesselation(Sphere(o, r), tess)) end plane = Rect3f(Vec3f(-5,-2,-1.05), Vec3f(10,4,0.05))</p><h2 id="the-actual-figure" tabindex="-1">the actual figure <a class="header-anchor" href="#the-actual-figure" aria-label="Permalink to &quot;the actual figure {#the-actual-figure}&quot;">​</a></h2><p>fig=Figure(; size=(900, 900)) ax=LScene(fig[1, 1]; show_axis=false, scenekw=(;lights=lights)) screen=RPRMakie.RPRScreen(size(ax.scene); plugin=RPR.Northstar, iterations=250) matsys=screen.matsys mesh!(ax, SphereTess(); color=RGB(0.082, 0.643, 0.918), material=RPR.DiffuseMaterial(matsys)) mesh!(ax, plane; color=:gainsboro, material=RPR.DiffuseMaterial(matsys))</p><p>GLMakie.activate!() zoom!(ax.scene, cameracontrols(ax.scene), 0.22) display(fig) context, task = RPRMakie.replace_scene_rpr!(ax.scene, screen) nothing # avoid printing stuff into the repl imageOut = colorbuffer(screen)</p><h2 id="save(&quot;SpherePlaneSky.png&quot;,-imageOut)-#-save-just-screen-scene." tabindex="-1">save(&quot;SpherePlaneSky.png&quot;, imageOut) # save just screen scene. <a class="header-anchor" href="#save(&quot;SpherePlaneSky.png&quot;,-imageOut)-#-save-just-screen-scene." aria-label="Permalink to &quot;save(&amp;quot;SpherePlaneSky.png&amp;quot;, imageOut) # save just screen scene. {#save(&quot;SpherePlaneSky.png&quot;,-imageOut)-#-save-just-screen-scene.}&quot;">​</a></h2><img src="https://github.com/lazarusA/RPRMakieNotes/blob/main/imgs/sphere_plane_greysky.png" alt=""><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This only works under windows and linux.</p></div>',14),n=[t];function i(l,c,u,p,h,m){return s(),a("div",null,n)}const k=e(o,[["render",i]]);export{d as __pageData,k as default};
